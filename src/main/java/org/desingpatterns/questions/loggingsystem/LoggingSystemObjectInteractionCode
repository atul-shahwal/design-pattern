@startuml
actor Client
participant Logger
participant LogHandler
participant DebugHandler
participant InfoHandler
participant WarningHandler
participant ErrorHandler
participant FatalHandler
participant LogAppender
participant ConsoleAppender
participant FileAppender
participant LogFormatter
participant SimpleLogFormatter
participant JsonLogFormatter

Client -> Logger: log(LogLevel.INFO, "Message", context)
activate Logger

Logger -> Logger: create LogMessage
activate Logger
deactivate Logger

Logger -> LogHandler: handle(logMessage)
activate LogHandler

LogHandler -> DebugHandler: handle(logMessage)
activate DebugHandler

DebugHandler -> DebugHandler: check level (DEBUG <= INFO)
activate DebugHandler
deactivate DebugHandler

DebugHandler -> LogAppender: append(logMessage)
activate LogAppender

LogAppender -> LogFormatter: format(logMessage)
activate LogFormatter

LogFormatter -> SimpleLogFormatter: format(logMessage)
activate SimpleLogFormatter
SimpleLogFormatter --> LogFormatter: formatted string
deactivate SimpleLogFormatter

LogFormatter --> LogAppender: formatted string
deactivate LogFormatter

LogAppender -> ConsoleAppender: write to console
activate ConsoleAppender
ConsoleAppender --> LogAppender:
deactivate ConsoleAppender

LogAppender --> DebugHandler:
deactivate LogAppender

DebugHandler --> LogHandler:
deactivate DebugHandler

LogHandler -> InfoHandler: handle(logMessage)
activate InfoHandler

InfoHandler -> InfoHandler: check level (INFO <= INFO)
activate InfoHandler
deactivate InfoHandler

InfoHandler -> LogAppender: append(logMessage)
activate LogAppender

' Repeat the formatting and appending process
LogAppender -> LogFormatter: format(logMessage)
activate LogFormatter

LogFormatter --> LogAppender: formatted string
deactivate LogFormatter

LogAppender -> ConsoleAppender: write to console
activate ConsoleAppender
ConsoleAppender --> LogAppender:
deactivate ConsoleAppender

LogAppender --> InfoHandler:
deactivate LogAppender

InfoHandler --> LogHandler:
deactivate InfoHandler

LogHandler -> WarningHandler: handle(logMessage)
activate WarningHandler

WarningHandler -> WarningHandler: check level (WARNING <= INFO)
activate WarningHandler
deactivate WarningHandler

' Level check fails, skip processing
WarningHandler --> LogHandler:
deactivate WarningHandler

' Continue through the chain...
LogHandler -> ErrorHandler: handle(logMessage)
activate ErrorHandler

ErrorHandler -> ErrorHandler: check level (ERROR <= INFO)
activate ErrorHandler
deactivate ErrorHandler

' Level check fails, skip processing
ErrorHandler --> LogHandler:
deactivate ErrorHandler

LogHandler -> FatalHandler: handle(logMessage)
activate FatalHandler

FatalHandler -> FatalHandler: check level (FATAL <= INFO)
activate FatalHandler
deactivate FatalHandler

' Level check fails, skip processing
FatalHandler --> LogHandler:
deactivate FatalHandler

LogHandler --> Logger:
deactivate LogHandler

Logger --> Client:
deactivate Logger
@enduml