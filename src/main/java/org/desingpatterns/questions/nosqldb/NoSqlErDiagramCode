@startuml
skinparam class {
    BackgroundColor White
    BorderColor Black
    ArrowColor Black
}

title NoSQL Database System - Class Diagram

interface DocumentStorage<K, V> {
    + put(K key, V document)
    + get(K key): V
    + remove(K key)
    + containsKey(K key): boolean
    + size(): int
    + query(String field, Object value): List<V>
    + scan(): List<V>
    + createIndex(String field)
    + removeIndex(String field)
}
note right of DocumentStorage
Main interface for NoSQL document storage.
Provides CRUD operations and supports querying and indexing.
Design Pattern: Strategy Pattern (for querying/indexing)
end note

interface PersistentStorage<K, V> {
    + persist(K key, V value)
    + retrieve(K key): V
    + delete(K key)
}
note right of PersistentStorage
Interface representing the persistence layer.
Design Pattern: Bridge Pattern (separates abstraction from implementation)
end note

interface WriteStrategy<K, V> {
    + write(K key, V value, DocumentStorage<K, V> documentStorage, PersistentStorage<K, V> persistentStorage)
}
note right of WriteStrategy
Interface defining how write operations are handled.
Design Pattern: Strategy Pattern (for write operations)
end note

interface ReplicationStrategy<K, V> {
    + replicate(K key, V value)
    + readFromReplica(K key): V
    + addReplica(DocumentStorage<K, V> replica)
}
note right of ReplicationStrategy
Interface defining how data is replicated for redundancy.
Design Pattern: Strategy Pattern (for replication)
end note

interface ShardingStrategy<K, V> {
    + getShardId(K key): String
    + addShard(String shardId, DocumentStorage<K, V> shardStorage)
    + removeShard(String shardId)
}
note right of ShardingStrategy
Interface defining how data is sharded across nodes.
Design Pattern: Strategy Pattern (for sharding)
end note

class KeyBasedLocking<K> {
    - lockMap: Map<K, ReadWriteLock>
    + withReadLock(K key, Supplier<T> operation): T
    + withWriteLock(K key, Runnable operation)
}
note right of KeyBasedLocking
Class for providing fine-grained, per-key locking
to prevent dirty reads and writes.
Design Pattern: Thread-Safe Pattern with ReadWriteLock
end note

class InMemoryDocumentStorage<K, V> {
    - storage: Map<K, V>
    - indexes: Map<String, Map<Object, Set<K>>>
    - lockingSystem: KeyBasedLocking<K>
    + put(K key, V document)
    + get(K key): V
    + remove(K key)
    + containsKey(K key): boolean
    + size(): int
    + query(String field, Object value): List<V>
    + scan(): List<V>
    + createIndex(String field)
    + removeIndex(String field)
    - updateIndexes(K key, V document)
    - removeFromIndexes(K key, V document)
    - extractFieldValue(V document, String field): Object
}
note right of InMemoryDocumentStorage
In-memory document storage using HashMap and explicit locking.
Prevents dirty reads/writes by synchronizing access per key.
Design Pattern: Decorator Pattern (enhances basic storage with indexing)
end note

class SimplePersistentStorage<K, V> {
    - storage: Map<K, V>
    + persist(K key, V value)
    + retrieve(K key): V
    + delete(K key)
}
note right of SimplePersistentStorage
Simple persistent storage implementation using a HashMap.
Design Pattern: Singleton Pattern (in this simple implementation)
end note

class WriteThroughStrategy<K, V> {
    + write(K key, V value, DocumentStorage<K, V> documentStorage, PersistentStorage<K, V> persistentStorage)
}
note right of WriteThroughStrategy
Write-through strategy where writes are persisted
immediately after in-memory storage.
Design Pattern: Strategy Pattern implementation
end note

class SimpleReplicationStrategy<K, V> {
    - replicas: List<DocumentStorage<K, V>>
    + replicate(K key, V value)
    + readFromReplica(K key): V
    + addReplica(DocumentStorage<K, V> replica)
}
note right of SimpleReplicationStrategy
Simple replication strategy where data is
replicated to all added replicas.
Design Pattern: Strategy Pattern implementation
end note

class NoSQLDatabase<K, V> {
    - documentStorage: DocumentStorage<K, V>
    - persistentStorage: PersistentStorage<K, V>
    - writeStrategy: WriteStrategy<K, V>
    - replicationStrategy: ReplicationStrategy<K, V>
    + put(K key, V value)
    + get(K key): V
}
note right of NoSQLDatabase
Main database class that uses locking for thread-safe operations.
Design Pattern: Facade Pattern (provides simplified interface to complex system)
end note

class NoSQLDatabaseTest {
    + main(String[] args)
    + testBasicCrudOperations()
    + testQueryOperations()
    + testConcurrency()
    + testShardingSimulation()
}
note right of NoSQLDatabaseTest
Test class demonstrating different test cases
separately for clarity.
Design Pattern: Test Pattern
end note

' Relationships
InMemoryDocumentStorage .up.|> DocumentStorage
SimplePersistentStorage .up.|> PersistentStorage
WriteThroughStrategy .up.|> WriteStrategy
SimpleReplicationStrategy .up.|> ReplicationStrategy

InMemoryDocumentStorage --> KeyBasedLocking : uses

NoSQLDatabase --> DocumentStorage : uses
NoSQLDatabase --> PersistentStorage : uses
NoSQLDatabase --> WriteStrategy : uses
NoSQLDatabase --> ReplicationStrategy : uses

NoSQLDatabaseTest --> NoSQLDatabase : tests
@enduml