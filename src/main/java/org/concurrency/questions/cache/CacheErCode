@startuml
!theme plain

interface CacheStorage {
    + put(key, value)
    + get(key): value
    + remove(key)
    + containsKey(key): boolean
    + size(): int
    + getCapacity(): int
}
note right of CacheStorage
  Provides abstraction for
  storing/retrieving data in cache.
end note

interface DBStorage {
    + write(key, value)
    + read(key): value
    + delete(key)
}
note right of DBStorage
  Provides abstraction for
  persistent storage operations.
end note

interface WritePolicy {
    + write(key, value, cacheStorage, dbStorage)
}
note right of WritePolicy
  Defines how writes are propagated
  to cache and DB (e.g., write-through,
  write-back).
end note

interface EvictionAlgorithm {
    + keyAccessed(key)
    + evictKey(): key
}
note right of EvictionAlgorithm
  Defines eviction strategy when
  cache exceeds capacity.
end note

class InMemoryCacheStorage {
    - cache: Map<K, V>
    - capacity: int
    + implementation methods
}
note right of InMemoryCacheStorage
  Stores data in memory using a map.
  Enforces capacity limit.
end note

class SimpleDBStorage {
    - database: Map<K, V>
    + implementation methods
}
note right of SimpleDBStorage
  Simulates persistent DB storage
  using a map.
end note

class WriteThroughPolicy {
    + write(key, value, cacheStorage, dbStorage)
}
note right of WriteThroughPolicy
  Ensures data is written to both
  cache and DB immediately.
end note

class LRUEvictionAlgorithm {
    - dll: DoublyLinkedList<K>
    - keyToNodeMap: Map<K, Node>
    + implementation methods
}
note right of LRUEvictionAlgorithm
  Implements Least Recently Used (LRU)
  eviction using DLL + hashmap.
end note

class DoublyLinkedList {
    - head: Node
    - tail: Node
    + addNodeAtTail(node)
    + detachNode(node)
    + getHead(): Node
    + removeHead()
}
note right of DoublyLinkedList
  Supports quick insert/remove for
  LRU eviction.
end note

class DoublyLinkedListNode {
    - value: K
    - prev: Node
    - next: Node
    + getValue(): K
}
note right of DoublyLinkedListNode
  Represents node in DLL for
  eviction tracking.
end note

class KeyBasedExecutor {
    - executors: ExecutorService[]
    - numExecutors: int
    + submitTask(key, task): CompletableFuture<T>
    + getExecutorIndexForKey(key): int
}
note right of KeyBasedExecutor
  Distributes tasks to executors
  based on key, ensuring thread
  affinity and ordering.
end note

class Cache {
    - cacheStorage: CacheStorage<K, V>
    - dbStorage: DBStorage<K, V>
    - writePolicy: WritePolicy<K, V>
    - evictionAlgorithm: EvictionAlgorithm<K>
    - keyBasedExecutor: KeyBasedExecutor
    + accessData(key): CompletableFuture<V>
    + updateData(key, value): CompletableFuture<Void>
}
note right of Cache
  Central class that integrates
  cache storage, DB, eviction,
  and write policy. Provides async
  access/update APIs.
end note

CacheStorage <|.. InMemoryCacheStorage
DBStorage <|.. SimpleDBStorage
WritePolicy <|.. WriteThroughPolicy
EvictionAlgorithm <|.. LRUEvictionAlgorithm
LRUEvictionAlgorithm o-- DoublyLinkedList
DoublyLinkedList o-- DoublyLinkedListNode
Cache o-- CacheStorage
Cache o-- DBStorage
Cache o-- WritePolicy
Cache o-- EvictionAlgorithm
Cache o-- KeyBasedExecutor

note right of CacheStorage: Strategy Pattern\nfor storage implementation
note right of WritePolicy: Strategy Pattern\nfor write policies
note right of EvictionAlgorithm: Strategy Pattern\nfor eviction algorithms
note right of KeyBasedExecutor: Thread affinity\nfor key-based ordering
@enduml